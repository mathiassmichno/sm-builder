#!/usr/bin/env python3

import smbuilder.builder
import smbuilder.parser
import smbuilder.util

import argparse
from configparser import ConfigParser, NoSectionError
import os
import shutil

import appdirs


class SMBuilderSettings:
    def __init__(self):
        # default values
        self.settings = {
            'compiler' : 'spcomp'
        }
        self._create_settings_file()

        filename = self._get_cfg_file()
        try:
            parser = ConfigParser()
            parser.read(filename)
            items = parser.items('Settings')
            for key, value in items:
                self.settings[key] = value
        except NoSectionError:
            pass

    def add_arg(self, key, value=None):
        if value:
            self.settings[key] = value

    def __getitem__(self, key):
        return self.settings[key]

    def _create_settings_file(self):
        filename = self._get_cfg_file()
        if not os.path.exists(filename):
            parser = ConfigParser()
            parser.add_section('Settings')
            for key in self.settings:
                parser.set('Settings', key, self.settings[key])

            cfg_dir = os.path.dirname(filename)
            os.makedirs(cfg_dir, exist_ok=True)

            with open(filename, 'w') as f:
                parser.write(f)
            print('Settings written to {}'.format(filename))


    def _get_cfg_file(self):
        dirs = appdirs.AppDirs('smbuilder', 'Sean Lewis')
        return dirs.user_config_dir + '.ini'


def clean():
    output_dir = 'builds'
    if os.path.exists(output_dir):
        shutil.rmtree(output_dir)


def main():
    settings = SMBuilderSettings()

    parser = argparse.ArgumentParser(
        description='A sourcemod build and packaging tool.')
    parser.add_argument('target', nargs='?', default='.')
    parser.add_argument('-c', '--compiler',
        help='Sourcepawn compiler to use.')
    parser.add_argument('--flags', nargs='?',
        help='Flags to pass to all compiled plugins', default='')
    parser.add_argument('--nocolor', action='store_true')
    parser.add_argument('--nosource', action='store_true')
    args = parser.parse_args()

    if args.target == 'config':
        print(settings._get_cfg_file())
    elif args.target == 'clean':
        clean()
    else:
        flags = args.flags
        settings.add_arg('compiler', args.compiler)
        smbuilder.util.GLOBAL_NOCOLOR = args.nocolor

        try:
            smbuilder.builder.perform_builds(args.target,
                settings['compiler'], args.flags, args.nosource)
        except Exception as e:
            smbuilder.util.error(str(e), True)


if __name__ == '__main__':
    main()
